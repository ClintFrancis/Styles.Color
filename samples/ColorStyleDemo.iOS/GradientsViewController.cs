// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Styles;
using Styles.Color;
using UIKit;

namespace ColorStyleDemo.iOS
{
	public partial class GradientsViewController : UIViewController
	{
		public GradientsViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			var frame = new CGRect(0, 60, View.Frame.Width, 200);

			var gradient1 = new Gradient(
				new IRgb[]{ ColorSwatches.DeepOrange, ColorSwatches.Yellow }
			);

			var gradient2 = new Gradient(
				new IRgb[]{ ColorSwatches.DeepOrange, ColorSwatches.Yellow.WithAlpha(0) }
			);

			var multiGradient = new MultiGradient()
			{
				Gradients = new Gradient[]{
					gradient1.ToLinear(45),
					gradient2.ToRadial(1,1)
				}
			};

			//var linearLayer = gradient.ToLinear(45).ToNativeLayer(gradientBox.Bounds);
			//gradientBox.Layer.InsertSublayer(linearLayer, 0);

			//var gradientView = gradient1
			//	.ToLinear()
			//	.ToNativeView(new CGRect(0, gradientBox.Frame.Height, gradientBox.Frame.Width, gradientBox.Frame.Height));

			var gradientView = multiGradient.ToNativeView(frame);
			Add(gradientView);

			var steps = 8;
			var swatchSize = View.Frame.Width / steps;

			var adjusted = gradient1.ShiftHues(0);
			var schemeFromGradient = adjusted.CreateColorPalette(steps);
			for (int i = 0; i < schemeFromGradient.Length; i++)
			{
				var color = (ColorRGB)schemeFromGradient[i];
				var swatch = new UIView(new CGRect(i * swatchSize, 300, swatchSize, swatchSize))
				{
					BackgroundColor = color.ToNative()
				};
				Add(swatch);
			}
		}
	}
}
